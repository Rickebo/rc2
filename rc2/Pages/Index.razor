@page "/"
@using rc2.Settings
@using rc2.Utilities
@using ApexCharts
@using Microsoft.AspNetCore.Components
@using rc2.Models
@using System.Timers
@using System.Numerics
@using System.Text.Json

@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Loan calculator</PageTitle>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>

<div class="options-panel">
    @* Settings div *@
    <div class="options-item">
        <MudSlider
            @ref="_interestSlider"
            @bind-Value="@_bindableOptions.InterestPercent"
            TickMarkLabels="@(GenerateLabels(0d, 25d, 1d, FormatPercent))"
            TickMarks="true" Step="1" Min="0" Max="25" ValueLabel="true">
            Interest
        </MudSlider>
    </div>

    <div class="options-item">
        <MudSlider
            @ref="_balanceSlider"
            @bind-Value="@_bindableOptions.Balance"
            TickMarkLabels="@(GenerateLabels(0d, 5000000d, 250000d, FormatMoney))"
            TickMarks="true" Step="250000" Min="0" Max="5000000" ValueLabel="true">
            Loan amount
        </MudSlider>
    </div>

    <div class="options-item">
        <MudSlider
            @ref="_paymentSlider"
            @bind-Value="@_bindableOptions.Payment"
            TickMarkLabels="@(GenerateLabels(0d, 40000d, 1000d, FormatMoney))"
            TickMarks="true" Step="1000" Min="0" Max="40000" ValueLabel="true">
            Preferred monthly payment: minimum amount of money to pay each month. Increases according to inflation.
        </MudSlider>
    </div>

    <div class="options-item">
        <MudSlider
            @ref="_depositSlider"
            @bind-Value="@_bindableOptions.DepositPercent"
            TickMarkLabels="@(GenerateLabels(0d, 100d, 5d, FormatPercent))"
            TickMarks="true" Step="5" Min="0" Max="100" ValueLabel="true">
            Initial deposit: percentage of loan amount that is paid upfront
        </MudSlider>
    </div>

    <div class="options-item">
        <MudSlider
            @ref="_depreciationSlider"
            @bind-Value="@_bindableOptions.DepreciationPercent"
            TickMarkLabels="@(GenerateLabels(0d, 25d, 1d, FormatPercent))"
            TickMarks="true" Step="1" Min="0" Max="25" ValueLabel="true">
            Depreciation: percentage of value deducted each year to account for inflation
        </MudSlider>
    </div>

    <div class="options-item">
        <MudSlider
            @ref="_inflationSlider"
            @bind-Value="@_bindableOptions.InflationPercent"
            TickMarkLabels="@(GenerateLabels(0d, 25d, 1d, FormatPercent))"
            TickMarks="true" Step="1" Min="0" Max="25" ValueLabel="true">
            Inflation: percentage of yearly increase in monthly payment and fees
        </MudSlider>
    </div>

    <div class="options-item">
        <MudSlider
            @ref="_paymentSlider"
            @bind-Value="@_bindableOptions.Fees"
            TickMarkLabels="@(GenerateLabels(0d, 8000, 250d, FormatMoney))"
            TickMarks="true" Step="250" Min="0" Max="8000" ValueLabel="true">
            Monthly fees: other monthly fees to account for. Increases according to inflation.
        </MudSlider>
    </div>

    <div class="options-grid">
        <div class="options-item">
            <MudTextField
                @bind-Value="_bindableOptions.MinAmortization"
                Label="Required minimum yearly amortization"
                HelperText="Example: >=0.7=0.03;<0.7=0.02 means 3% amortization if loan is >= 70% of original value, and 2% if below 70%. Enter 0 for no minimum."
                Variant="Variant.Outlined"/>
        </div>

        <div class="options-item">
            <MudTextField
                @bind-Value="_bindableOptions.InterestDeduction"
                Label="Interest tax deduction"
                HelperText="Example: <=100000=0.3;>=100000=0.21 means 30% deduction if yearly interest is less than 100000, and 21% if above. Enter 0 for no deduction."
                Variant="Variant.Outlined"/>
        </div>


        <div class="options-item">
            <MudTextField
                @bind-Value="_bindableOptions.TimeStep"
                Label="Simulation time step"
                HelperText="Example: 1m means 1 month, 2w means two weeks. Shorter time steps increase accuracy but slows down simulation."
                Variant="Variant.Outlined"/>
        </div>
    </div>
</div>

<div class="grid-container">
    @* <div style="width: 50%; height: 33vh; float: left"> *@


    <div>
        <ApexChart
            TItem="DataPoint"
            Title="Loan balance over time"
            @ref="_charts.BalanceChart"
            Options="_charts.BalanceOptions">
            <ApexPointSeries
                TItem="DataPoint"
                Items="DataPoints"
                Name="Loan balance"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Time)"
                YValue="@(dp => (decimal)dp.Balance)"
                OrderByDescending="e => e.X"/>
        </ApexChart>
    </div>
    <div>
        <ApexChart
            TItem="Relation"
            Title="Total expenses"
            @ref="_charts.ExpensesChart"
            Options="_charts.ExpensesOptions">
            <ApexPointSeries
                TItem="Relation"
                Items="Relations"
                Name="Expenses"
                SeriesType="SeriesType.Pie"
                XValue="@(dp => dp.Name)"
                YValue="@(dp => (decimal)dp.Value)"
                OrderByDescending="e => e.X"
                ShowDataLabels/>
        </ApexChart>
    </div>
    <div>
        <ApexChart
            TItem="InterestDataPoint"
            Title="Total interest proportion of loan"
            @ref="_charts.InterestProportionChart"
            Options="_charts.InterestProportionOptions">
            <ApexPointSeries
                TItem="InterestDataPoint"
                Items="Interests"
                Name="Interest proportion"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Interest * 100)"
                YValue="@(dp => (decimal)dp.InterestProportion * 100)"
                OrderByDescending="e => e.X"/>
        </ApexChart>
    </div>
    @* </div> *@
    @* <div style="margin-left: 50%; height: 33vh"> *@
    <div>
        <ApexChart
            TItem="DataPoint"
            Title="Monthly expenses"
            @ref="_charts.CostsChart"
            Options="_charts.CostsOptions">
            <ApexPointSeries
                TItem="DataPoint"
                Items="DataPoints"
                Name="Amortization"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Time)"
                YValue="@(dp => (decimal)dp.Amortization)"
                OrderByDescending="e => e.X"/>

            <ApexPointSeries
                TItem="DataPoint"
                Items="DataPoints"
                Name="Interest"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Time)"
                YValue="@(dp => (decimal)dp.Interest)"
                OrderByDescending="e => e.X"/>


            <ApexPointSeries
                TItem="DataPoint"
                Items="DataPoints"
                Name="Fees"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Time)"
                YValue="@(dp => (decimal)dp.Fees)"
                OrderByDescending="e => e.X"/>


            <ApexPointSeries
                TItem="DataPoint"
                Items="DataPoints"
                Name="Total"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Time)"
                YValue="@(dp => (decimal)dp.Payment)"
                OrderByDescending="e => e.X"/>
        </ApexChart>
    </div>
    <div>
        <ApexChart
            TItem="InterestDataPoint"
            Title="Required monthly payment vs interest"
            @ref="_charts.InterestChart"
            Options="_charts.InterestOptions">
            <ApexPointSeries
                TItem="InterestDataPoint"
                Items="Interests"
                Name="Required monthly payment"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Interest * 100)"
                YValue="@(dp => (decimal)dp.MaxPayment)"
                OrderByDescending="e => e.X"/>
        </ApexChart>
    </div>

    <div>
        <ApexChart
            TItem="BalanceDataPoint"
            Title="Required monthly payment vs balance"
            @ref="_charts.BalanceCostChart"
            Options="_charts.BalanceCostOptions">
            <ApexPointSeries
                TItem="BalanceDataPoint"
                Items="BalanceCosts"
                Name="Balance costs"
                SeriesType="SeriesType.Line"
                XValue="@(dp => dp.Balance)"
                YValue="@(dp => (decimal)dp.MaxPayment)"
                OrderByDescending="e => e.X"/>
        </ApexChart>
    </div>
    @* </div> *@
</div>

@code {
    private static double WindowWidth { get; set; }

    private MudSlider<double> _interestSlider;
    private MudSlider<double> _paymentSlider;
    private MudSlider<double> _inflationSlider;
    private MudSlider<double> _depreciationSlider;
    private MudSlider<double> _balanceSlider;
    private MudSlider<double> _depositSlider;

    private Options _options = Options.Default;
    private BindableOptions _bindableOptions;
    private readonly YearTicker _yearTicker = new();
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider;


    private ReferencingEnumerable<DataPoint> DataPoints => new(() => _result.DataPoints);

    private ReferencingEnumerable<Relation> Relations => new(() => new[]
    {
        new Relation(_result.DataPoints, dp => dp.Interest, "Interest"),
        new Relation(_result.DataPoints, dp => dp.Amortization, "Amortization")
    });

    private ReferencingEnumerable<InterestDataPoint> Interests => new(() => _result.InterestDataPoints);
    private ReferencingEnumerable<BalanceDataPoint> BalanceCosts => new(() => _result.BalanceDataPoints);

    private SimulationResult _result = SimulationResult.Empty;
    private Charts _charts = new();
    private static IJSRuntime Runtime;

    private static string FormatMoney(double money) =>
        money >= 1000000
            ? $"{money / 1000000:0.##}M"
            : money >= 1000
                ? $"{money / 1000:0.##}K"
                : $"{money:0.##}";

    private static string FormatPercent(double percent) =>
        $"{percent:0}%";

    private static string[] GenerateLabels<T>(
        MudSlider<T> slider,
        Func<T, string>? formatter = null
        ) where T : INumber<T> =>
            GenerateLabels(
                slider.Min,
                slider.Max,
                slider.Step,
                formatter
                );

    private static string[] GenerateLabels<T>(
        T min,
        T max,
        T ticks,
        Func<T, string>? formatter = null,
        bool dynamicSkips = true
        ) where T : INumber<T>
    {
        formatter ??= i => i.ToString() ?? string.Empty;
        var steps = (max - min) / ticks;
        var labels = new List<string>();
        var index = 0;

        var keepEvery = 1;
        var minWidth = 1280;
        var actualWidth = WindowWidth;
        keepEvery = 1 + (int)Math.Floor(minWidth / actualWidth);
        var tickIndex = 0;

        for (var tick = min; tick <= max; tick += ticks)
            labels.Add(tickIndex++ % keepEvery == 0
                ? formatter(tick)
                : "");

        return labels.ToArray();
    }

    private async Task<WindowDimension> GetAdjustedDimensions() =>
        await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");

    private readonly Timer _updateTimer = new Timer(
        TimeSpan.FromSeconds(1)
        )
    {
        AutoReset = false
    };

    public Index()
    {
        _bindableOptions = new BindableOptions(() => _options);
        _updateTimer.Elapsed += (s, a) => InvokeAsync(Refresh);
    }


    protected override async Task OnInitializedAsync()
    {
        var dimensions = await GetAdjustedDimensions();
        WindowWidth = dimensions.Width;

        _options = (await localStorage.GetItemAsync<Options>("options")) ?? Options.Default;
        _bindableOptions.PropertyChanged += (s, a) => OnSettingsChanged();

#if DEBUG
        Console.WriteLine("Using options:");
        Console.WriteLine(JsonSerializer.Serialize(_options, new JsonSerializerOptions
        {
            WriteIndented = true
        }));
#endif

        await Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            _charts.SetDarkMode(_isDarkMode);
            await _charts.UpdateAllOptions();
            StateHasChanged();
        }
    }

    public void OnSettingsChanged()
    {
        localStorage.SetItemAsync("options", _options);

        if (_updateTimer.Enabled)
            _updateTimer.Stop();

        _updateTimer.Start();
    }

    public async Task Refresh()
    {
        Console.WriteLine("Refreshing...");
        await Update();
        await _charts.UpdateAll();
    }

    public async Task Update()
    {
        _result = await SimulateAll();
    }

    public async Task<SimulationResult> SimulateAll(Options? opt = null)
    {
        opt ??= _options;
        var simulator = new Simulator(opt);
        var generalTask = Task.Run(() => simulator.Simulate(
            allowInsufficientPayment: true
            ));
        var yearsTask = Task.Run(() => simulator.SimulateYears());
        var interestTask = Task.Run(() => simulator.SimulateInterest(
            overridePayment: 0,
            overrideInflation: 0
            ));
        var interestProportionTask = Task.Run(() => simulator.SimulateInterest());
        var balanceTask = Task.Run(() => simulator.SimulateBalance(
            overridePayment: 0,
            overrideInflation: 0
            ));

        await Task.WhenAll(generalTask, yearsTask, interestTask, interestProportionTask, balanceTask);

        return new SimulationResult(
            DataPoints: generalTask.Result.Where(dp => dp != null).Select(dp => dp!),
            YearDataPoints: yearsTask.Result,
            InterestDataPoints: interestTask.Result,
            InterestProportionDataPoints: interestProportionTask.Result,
            BalanceDataPoints: balanceTask.Result
            );
    }

    private class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

}